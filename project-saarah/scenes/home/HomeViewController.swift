//
//  HomeViewController.swift
//  project-saarah
//
//  Created by Bruno Rocha on 29/09/19.
//  Copyright (c) 2019 Bruno Rocha. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
    func displayHomeNotifications (viewModel: Home.FetchHomeNotifications.ViewModel)
}

class HomeViewController: SaarahViewController, HomeDisplayLogic {
	// MARK: Property
	var interactor: HomeBusinessLogic?
	var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    private var homeView = HomeView()
    private var homeMenuOptions = HomeMenuOption.allCases
    private var displayedHomeNotifications = [Home.FetchHomeNotifications.ViewModel.DisplayedHomeNotification]()

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setup()
    }

	// MARK: View lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
        defaultViewControllerConfiguration()
		requestHomeNotifications()
	}

	// MARK: Setup
	private func setup() {
		let viewController = self
		let interactor = HomeInteractor()
		let presenter = HomePresenter()
		let router = HomeRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

    func defaultViewControllerConfiguration () {
        title = "Restaurante"
        view = homeView
        homeView.tableView.delegate = self
        homeView.tableView.dataSource = self
    }

    func requestHomeNotifications () {
        let request = Home.FetchHomeNotifications.Request()
        interactor?.fetchHomeNotifications(request: request)
    }

    func displayHomeNotifications (viewModel: Home.FetchHomeNotifications.ViewModel) {
        displayedHomeNotifications = viewModel.displayedHomeNotifications
        homeView.tableView.reloadData()
    }
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return homeView.tableViewSections.count
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch HomeView.HomeTableViewSections(rawValue: section) {
        case .menu:
            return 1
        case .notifications:
            return displayedHomeNotifications.count
        case .none:
            return 0
        }
    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        switch HomeView.HomeTableViewSections(rawValue: section) {
        case .menu:
            return EmptySectionHeaderView()
        case .notifications:
            let headerView = DefaultSectionHeaderView()
            headerView.titleLabel.text = "NOTIFICAÇÕES"
            headerView.rightButton.setTitle("VER TODAS", for: .normal)
            return headerView
        case .none:
            return nil
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch HomeView.HomeTableViewSections(rawValue: indexPath.section) {
        case .menu:
            let homeMenuTableViewCell = HomeMenuTableViewCell()
            homeMenuTableViewCell.homeMenuCollectionView.delegate = self
            homeMenuTableViewCell.homeMenuCollectionView.dataSource = self
            return homeMenuTableViewCell
        case .notifications:
            let notificationCell = HomeNotificationTableViewCell()
            let displayedHomeNotification = displayedHomeNotifications[indexPath.row]
            notificationCell.messageLabel.text = displayedHomeNotification.message
            notificationCell.emojiLabel.text = displayedHomeNotification.emoji
            notificationCell.type = displayedHomeNotification.type
            return notificationCell
        case .none:
            return UITableViewCell()
        }
    }
}

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return homeMenuOptions.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let collectionView = collectionView as? HomeMenuCollectionView,
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: collectionView.cellIdentifier, for: indexPath) as? HomeCardCollectionViewCell else {
            return UICollectionViewCell()
        }

        let homeMenuOption = homeMenuOptions[indexPath.row]
        cell.cardTitle.text = homeMenuOption.title
        cell.cardIcon.image = homeMenuOption.icon.uiImage
        cell.highlightedColor = homeMenuOption.highlightedColor
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let selectedHomeMenuOption = homeMenuOptions[indexPath.item]
        switch selectedHomeMenuOption {
        case .inventory:
            router?.navigateToInventory()
        case .menu:
            router?.navigateToDishesMenu()
        case .measurers:
            router?.navigateToMeasurers()
        case .settings:
            router?.navigateToSettings()
        }
    }
}
